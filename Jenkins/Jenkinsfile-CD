pipeline {
    agent any
    
    parameters {
        
        string(name: 'customers-service', defaultValue: 'main')
        string(name: 'genai-service', defaultValue: 'main')
        string(name: 'vets-service', defaultValue: 'main')
        string(name: 'visits-service', defaultValue: 'main')

//      string(name: 'zipkin', defaultValue: 'main')

    }

    environment {
        REPO_URL = 'https://github.com/22127475/spring-petclinic-microservices.git'
        IMAGE_NAME = '22127475/spring-petclinic'
        HELM_DIR = 'helm_chart'
        namespace = "dev-${env.BUILD_ID}"
        DOMAIN = "${namespace}.com"


        
        
    }

    stages {
        stage('SCM checkout') {
            steps {
                checkout scm
            }
        }
        stage('Deploy services') {
            steps {
                script {
                    
                    services = [
                        [name: 'config-server', branch: 'main', port: 8888],
                        [name: 'discovery-service', branch: 'main',  port: 8761 ],

                        [name: 'api-gateway', branch: 'main',  port: 8085],
                        [name: 'customers-service', branch: params['customers-service'],  port: 8081],
                        [name: 'visits-service', branch: params['visits-service'],  port: 8882], 
                        [name: 'vets-service', branch: params['vets-service'],  port: 8883],
                        [name: 'genai-service', branch: params['genai-service'], port: 8884],
//                      [name: 'zipkin', branch: 'main', port: 9411],                        
                        [name: 'admin-server', branch: 'main', port: 9090],                         
                    ]


                    def yamlLines = [
                        "namespace: ${namespace}",
                        "services:"
                    ]
                    tags = []
                    for (service in services) {
                        def tag
                        if (service.branch == 'main') {
                            tag = 'latest'
                        } 
                        else {
                            def branchRef = "refs/heads/${service.branch}"
                            tag = bat(
                                script: """
                                        @echo off
                                        for /f "tokens=1" %%A in ('git ls-remote ${REPO_URL} refs/heads/${service.branch}') do @echo %%A
                                    """, returnStdout: true 
                                ).trim()
                        }
                        tags.add(tag)
                        echo "Tag for ${service.name} (${service.branch}): ${tag}"

                        // write new values.yaml
                        def svc = services[i]
                        def tag = tags[i]
                        yamlLines << "  ${svc.name}:"
                        yamlLines << "    enabled: true"
                        yamlLines << "    image:"
                        yamlLines << "      repository: ${IMAGE_NAME}-${svc.name}"
                        yamlLines << "      tag: ${tag}"
                        yamlLines << "    port: ${svc.port}"
                        yamlLines << "ingress:"
                        yamlLines << "  enabled: true"
                        yamlLines << "  host: ${DOMAIN}"

                        writeFile file: 'values.generated.yaml', text: yamlLines.join('\n')


                    }
                }
            }
        }

        stage('Deploy with helm') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'k8s-secret-file', variable: 'KUBECONFIG')]) {
                        for (int i =0; i < services.size(); ++i) {
                            def service = services[i]
                            def tag = tags[i]
    
                            bat """
                                helm upgrade --install petclinic-${namespace} ${HELM_DIR}/chart ^ 
                                --namespace ${namespace} --create-namespace ^
                                -f values.generated.yaml
                            """
                        }
                    }
                }
            }
        }

        stage('Show access link') {
            steps {
                script {
                    def nodePort = bat(
                        script: 'kubectl get svc api-gateway -n test -o jsonpath="{.spec.ports[0].nodePort}"',
                        returnStdout: true
                    ).trim()
                    
                    
                    def lines = nodePort.split('\r?\n')
                    def cleanNodePort = lines[-1] 

                    echo "Access link: ${DOMAIN}"
                    echo "Namespace: ${namespace}"
                    echo "Delete link: "
                    
                }
            }
        }

        
    }
}
