pipeline {
    agent any
    
    parameters {
        string(name: 'config-server', defaultValue: 'main')
        string(name: 'discovery-service', defaultValue: 'main')
        string(name: 'api-gateway', defaultValue: 'main')
        string(name: 'customers-service', defaultValue: 'main')
        string(name: 'genai-service', defaultValue: 'main')
        string(name: 'vets-service', defaultValue: 'main')
        string(name: 'visits-service', defaultValue: 'main')
        string(name: 'admin-server', defaultValue: 'main')  

//      string(name: 'zipkin', defaultValue: 'main')

    }

    environment {
        REPO_URL = 'https://github.com/22127475/spring-petclinic-microservices.git'
        IMAGE_NAME = '22127475/spring-petclinic'
    }

    stages {
        stage('Deploy services') {
            steps {
                script {
                    
                    services = [
                        [name: 'config-server', branch: params['config-server']],
                        [name: 'discovery-service', branch: params['discovery-service']],

                        [name: 'api-gateway', branch: params['api-gateway']]
                        [name: 'customers-service', branch: params['customers-service']],
                        [name: 'visits-service', branch: params['visits-service']], 
                        [name: 'vets-service', branch: params['vets-service']],
                        [name: 'genai-service', branch: params['genai-service']],
//                      [name: 'zipkin', branch: params['zipkin']],                        
                        [name: 'admin-server', branch: params['admin-server']],                         
                    ]


                    
                    tags = []
                    for (service in services) {
                        def tag
                        if (service.branch == 'main') {
                            tag = 'latest'
                        } else {
                            def branchRef = "refs/heads/${service.branch}"
                            tag = bat(
    script: """
        @echo off
        for /f "tokens=1" %%A in ('git ls-remote ${REPO_URL} refs/heads/${service.branch}') do @echo %%A
    """,
    returnStdout: true
).trim()
                        }
                        tags.add(tag)
                        echo "Tag for ${service.name} (${service.branch}): ${tag}"
                    }
                }
            }
        }

        stage('Pull images') {
            steps {
                script {
                    
                    for (int i = 0; i < services.size(); i++) {
                        def service = services[i]
                        def tag = tags[i]
                        
                        bat "docker image pull ${IMAGE_NAME}-${service.name}:${tag}"
                        echo "pulled image: ${IMAGE_NAME}-${service.name}:${tag}"
                    }
                }
            }
        }        
    }
}
